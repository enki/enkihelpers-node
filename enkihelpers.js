// Generated by CoffeeScript 1.4.0
(function() {
  var ReadyQueue, extend, generate_id,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  extend = exports.extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      if (!__hasProp.call(properties, key)) continue;
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  exports.merge = function(options, overrides) {
    return extend(extend({}, options), overrides);
  };

  generate_id = function(bitlength) {
    var limit, maxSize, parts, string;
    bitlength = bitlength || 32;
    if (bitlength > 32) {
      parts = Math.ceil(bitlength / 32);
      string = '';
      while (parts--) {
        string += generate_id(32);
      }
      return string;
    }
    limit = Math.pow(2, bitlength) - 1;
    maxSize = limit.toString(36).length;
    string = Math.floor(Math.random() * limit).toString(36);
    while (string.length < maxSize) {
      string = '0' + string;
    }
    return string;
  };

  exports.wrap_error = function(func, errhandler) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      try {
        return func.apply(null, args);
      } catch (e) {
        return errhandler(e);
      }
    };
  };

  exports.generate_id = generate_id;

  exports.ReadyQueue = ReadyQueue = (function() {

    function ReadyQueue() {
      this.process = __bind(this.process, this);

      this.set_dead = __bind(this.set_dead, this);

      this.set_ready = __bind(this.set_ready, this);

      this.queue = __bind(this.queue, this);
      this._queued = [];
      this._ready = false;
      this._dead = false;
    }

    ReadyQueue.prototype.queue = function(callback, errback) {
      this._queued.push([callback, errback]);
      return this.process();
    };

    ReadyQueue.prototype.set_ready = function() {
      this._ready = true;
      this._dead = false;
      return this.process();
    };

    ReadyQueue.prototype.set_dead = function() {
      this._ready = false;
      this._dead = true;
      return this.process();
    };

    ReadyQueue.prototype.process = function() {
      var elem, rev, _results;
      if (!(this._ready || this._dead)) {
        return;
      }
      rev = this._queued.reverse();
      this._queued = [];
      _results = [];
      while (rev.length) {
        elem = rev.pop();
        if (this._ready) {
          if (typeof elem[0] === "function") {
            elem[0]();
          }
        }
        if (this._dead) {
          if (elem[1]) {
            _results.push(elem[1]());
          } else {
            throw Error("Call on dead ReadyQueue, but has no Error Handler.");
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ReadyQueue;

  })();

  exports.type_to_string = function(obj) {
    var classToType, myClass, name, _i, _len, _ref;
    if (obj === void 0 || obj === null) {
      return String(obj);
    }
    classToType = new Object;
    _ref = "Boolean Number String Function Array Date RegExp".split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    myClass = Object.prototype.toString.call(obj);
    if (myClass in classToType) {
      return classToType[myClass];
    }
    return "object";
  };

}).call(this);
